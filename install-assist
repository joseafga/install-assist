#!/usr/bin/env bash
#
#----------------------------------------------------------------------
# INSTALL ASSIST 
#----------------------------------------------------------------------
# Interactive tool to guide the user step by step in the installation of Mazon OS
#
# author: José Almeida <jose.afga@gmail.com>
# version: 0.0.1-alpha
# license: MIT
# 

declare -r VERSION="0.0.1-alpha"
declare -A COLORS LANGS  # associative arrays

# TODO: languages
#TEXTDOMAINDIR=./locale
#TEXTDOMAIN=install-assist

# colors for style
COLORS=(
    # foreground
    ['fg_black']='0;30'
    ['fg_red']='0;31'
    ['fg_green']='0;32'
    ['fg_brown']='0;33'
    ['fg_blue']='0;34'
    ['fg_purple']='0;35'
    ['fg_cyan']='0;36'
    ['fg_gray']='0;37'
    # foreground light
    ['fg_dark_gray']='1;30'
    ['fg_light_red']='1;31'
    ['fg_light_green']='1;32'
    ['fg_yellow']='1;33'
    ['fg_light_blue']='1;34'
    ['fg_light_purple']='1;35'
    ['fg_light_cyan']='1;36'
    ['fg_white']='1;37'
    # background
    ['bg_black']='40'
    ['bg_red']='41'
    ['bg_green']='42'
    ['bg_yellow']='43'
    ['bg_blue']='44'
    ['bg_magenta']='45'
    ['bg_cyan']='46'
    ['bg_gray']='47'
    # none
    #['fg_none']='0;39'
    #['bg_none']='49'
)

# WARNING: use array key with same name of the language file
LANGS=(
    ['en_US']='English'
    ['pt_BR']='Português (Brasil)'
)


#----------------------------------
# Print tool name and version
#----------------------------------
show_version()
{
    echo "Install Assist v$VERSION"
}


#----------------------------------
# Painter will color the strings
#----------------------------------
# based on PHP CLI Colors
# see: https://www.if-not-true-then-false.com/2010/php-class-for-coloring-php-command-line-cli-scripts-output-php-output-colorizing-using-bash-shell-colors/
#
# usage:
#   painter <string> <foreground> [background]
#
# examples:
#   paint "mystring" "none" "black"  # fg black
#   paint "mystring" "green"  # fg green
#   paint "mystring" "black" "green"  # fg black and bg green
painter()
{
    local colored='';
    
    # another check options
    # what is better?
    # if [ -n "$2" ]
    # if [ ! -z "$2" ]
    
    # add foreground color
    if [ $2 ] || [[ "$2" != "none" ]]; then
        colored="${colored}\e[${COLORS[fg_${2}]}m"
    fi
    
    # add background color
    [ $3 ] && colored="${colored}\e[${COLORS[bg_${3}]}m"
    
    # concat string and add end of color
#     echo "${colored}${1}\e[0m"  # debug
    echo -e "${colored}${1}\e[0m"
}


#----------------------------------
# Language select menu
#----------------------------------
# Display a menu to select assistant language
select_lang()
{
    # create array with $LANGS keys and add exit as first option
    local -a 'lid=(exit "${!LANGS[@]}")'
    
    # message for select menu
    PS3="Choose assistant language (0 to EXIT): "

    # show menu
    select option in "${LANGS[@]}"; do
        # switch case number selected
        case "$REPLY" in
            "0") echo "Bye bye"; exit 0;;
            [1-"${#LANGS[@]}"]) # support max 9 languages for now
                # set terminal language variable
                export LANG="${lid[${REPLY}]}.UTF-8"
                # import language file
                . "./locale/${lid[${REPLY}]}"
                break;;
            *) echo "Incorrect input: select a number 0-${#LANGS[@]}";;
        esac
    done
}


#----------------------------------
# Show message block
#----------------------------------
# Display message in a block to improve readability
# Use \n to break line
#
# usage:
#   message <string>
message() {
    #IFS='\\n' read -ra msg <<< "$1"
    mapfile -t msg <<< $(echo -e "$1")
    #declare -p msg  # DEBUG
    
    local s=("${msg[@]}")
    local placeholder=''
    local length=0
    
    # get the big one
    for l in "${msg[@]}"; do
        if [ $length -lt ${#l} ]; then
            placeholder="$l"
            length="${#l}"
        fi
    done

    # header
    tput cuf1 # 1 char left margin
    # checks if have title arg
    if [ $2 ]; then
        # some calcs 
        # ((phase_length - title_length - spaces) / just_left_lenght)
        local x=$((($length - ${#2} - 2) / 2))

        # print full line a
        # replace with sed using quantifiers of words length
        painter "┌${placeholder//?/─}┐" 'green' | sed -E "s/(─.{${x}})(.{${#2}})/\1 ${2} /"
    else
        # header without
        painter "┌─${placeholder//?/─}─┐" 'green'
    fi
    
    # print content message line by line
    printf " $(painter "│ %-${length}s │" 'green')\n" "${msg[@]}"
    
    # bottom/
    tput cuf1  # 1 char left margin
    painter "└─${placeholder//?/─}─┘" 'green'
}


#----------------------------------
# Main function
#----------------------------------
main() {
    # reset variables
    local aux=''
    
    # initial message
    message "$WELCOME"

    # DEBUG
    # message "Essa outra mensagem possui linhas bem grandes\nO que não é recomendável, porém é possível" "Títuluzinho"
    # message "Essa outra mensagem possui linhas bem grandes\nO que não éãããããããã"
    # message "Essa mensagem possui\nMultiplas linhas\ncomo é possivel verificar\n:)" "Título"
    # exit

    # do loop until aux be filled
    while [ -z "$aux" ]; do
        # fake PS1
        #echo -ne "$(painter "$USER@$HOSTNAME" "light_green"):$(painter "$PWD" "light_blue")# "
        echo -ne "$(painter "$USER@$HOSTNAME" "light_green"):# "
        read cmd  # read command
        
        echo $(eval "$cmd")
        
        [[ "$cmd" = 'exit' ]] && loop='set'
    done
    
    message "$DONE"  # just for test
}


#----------------------------------/
# Args actions
#----------------------------------
case $1 in
    -h|--help)
        echo "Se vira ..."
        exit 0
    ;;
    -v|--version)
        show_version
        exit 0
    ;;
esac

# print converted ASCII logo to prevent escape erros
base64 -d <<< "CiBfIF98ICAgXCB8ICAgX198IF9fIF9ffCAgXCAgICB8ICAgIHwgICAgICAgXCAgICAgX198ICAg
X198IF8gX3wgICBfX3wgX18gX198CiAgIHwgICAuICB8IFxfXyBcICAgIHwgICBfIFwgICB8ICAg
IHwgICAgICBfIFwgIFxfXyBcIFxfXyBcICAgfCAgXF9fIFwgICAgfAogX19ffCBffFxffCBfX19f
LyAgIF98IF8vICBfXCBfX198IF9fX3wgIF8vICBfXCBfX19fLyBfX19fLyBfX198IF9fX18vICAg
X3wKCg=="

select_lang
# . "./locale/pt_BR"

# let the show begin
main
