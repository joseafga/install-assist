#!/usr/bin/env bash
#
#----------------------------------------------------------------------
# INSTALL ASSIST 
#----------------------------------------------------------------------
# Interactive tool to guide the user step by step in the installation of Mazon OS
#
# author: José Almeida <jose.afga@gmail.com>
# version: 0.0.2-alpha
# license: MIT
# 

declare -r VERSION="0.0.2-alpha"
declare -A COLORS _LANGS  # associative arrays

# TODO: languages
#TEXTDOMAINDIR=./locale
#TEXTDOMAIN=install-assist

COLORS=(
    # foreground
    ['black']=$'\033[0;30m'
    ['red']=$'\033[0;31m'
    ['green']=$'\033[0;32m'
    ['brown']=$'\033[0;33m'
    ['blue']=$'\033[0;34m'
    ['purple']=$'\033[0;35m'
    ['cyan']=$'\033[0;36m'
    ['gray']=$'\033[0;37'
    # foreground light
    ['dark_gray']=$'\033[1;30m'
    ['light_red']=$'\033[1;31m'
    ['light_green']=$'\033[1;32m'
    ['yellow']=$'\033[1;33m'
    ['light_blue']=$'\033[1;34m'
    ['light_purple']=$'\033[1;35m'
    ['light_cyan']=$'\033[1;36m'
    ['white']=$'\033[1;37'
    # background
    ['bg_black']=$'\033[40m'
    ['bg_red']=$'\033[41m'
    ['bg_green']=$'\033[42m'
    ['bg_yellow']=$'\033[43m'
    ['bg_blue']=$'\033[44m'
    ['bg_magenta']=$'\033[45m'
    ['bg_cyan']=$'\033[46m'
    ['bg_gray']=$'\033[47m'
    # none
    ['reset']=$'\033[0m'
    #['none']=$'\033[0;39m'
    #['bg_none']=$'\033[49m'
)

# WARNING: use array key with same name of the language file
_LANGS=(
    ['en_US']='English'
    ['pt_BR']='Português (Brasil)'
)

# base64 logo
_LOGO='CiBfIF98ICAgXCB8ICAgX198IF9fIF9ffCAgXCAgICB8ICAgIHwgICAgICAgXCAgICAgX198ICAg
X198IF8gX3wgICBfX3wgX18gX198CiAgIHwgICAuICB8IFxfXyBcICAgIHwgICBfIFwgICB8ICAg
IHwgICAgICBfIFwgIFxfXyBcIFxfXyBcICAgfCAgXF9fIFwgICAgfAogX19ffCBffFxffCBfX19f
LyAgIF98IF8vICBfXCBfX198IF9fX3wgIF8vICBfXCBfX19fLyBfX19fLyBfX198IF9fX18vICAg
X3wKCg=='


_show_version()
{
    echo "Install Assist v$VERSION"
}


#----------------------------------
# Painter will color the strings
#----------------------------------
# based on PHP CLI Colors
# see: https://www.if-not-true-then-false.com/2010/php-class-for-coloring-php-command-line-cli-scripts-output-php-output-colorizing-using-bash-shell-colors/
#
# usage:
#   painter <string> <foreground> [background]
#
# examples:
#   paint "mystring" "black" "green"  # fg black and bg green
painter()
{
    local colored=''

    # echo "$1"
    # echo -e $(sed -Ee 's:\{([a-z]*)\}:${COLORS[fg_\1]}:g' -e 's:\{/color\}:\\e[0m:g' <<< $1)
    
    # add foreground color
    if [ -n "$2" ] && [[ $2 != "none" ]]; then
        colored="${colored}${COLORS[fg_${2}]}"
    fi
    
    # add background color
    [ -n "$3" ] && colored="${colored}${COLORS[bg_${3}]}"
    
    # concat string and add end of color
    echo -e "${colored}${1}${COLORS[reset]}"
}


#----------------------------------
# Display a menu to select assistant language
#----------------------------------
select_lang()
{
    # create array with $_LANGS keys and add exit as first option
    local -a 'lid=(exit "${!_LANGS[@]}")'
    
    # message for select menu
    PS3="Choose assistant language (0 to EXIT): "

    select option in "${_LANGS[@]}"; do
        case "$REPLY" in
            "0")
                echo "Bye bye"
                exit 0
            ;;
            [1-"${#_LANGS[@]}"]) # support max 9 languages for now
                # set terminal language variable
                export LANG="${lid[${REPLY}]}.UTF-8"
                export LC_CTYPE="${lid[${REPLY}]}.UTF-8"
                
                # import language file
                . "./locale/${lid[${REPLY}]}"
                
                break
            ;;
            *) echo "Incorrect input: select a number 0-${#_LANGS[@]}" ;;
        esac
    done
}


#----------------------------------
# Display message in a block to improve readability
# Use \n to break line
#----------------------------------
# usage:
#   message <string>
message() {
    #IFS='\\n' read -ra msg <<< "$1"
    #
    mapfile -t msg <<< $(painter "$1")
    declare -p msg  # DEBUG
    
    # initialize local vars
    local s="${msg[@]}"
    local line=''
    local llen=0
    
    # get the big one
    for l in "${msg[@]}"; do
        l=$(sed -E 's:\\e[[0-9;]*m::g' <<< $l)
        echo $l
        if [ $llen -lt ${#l} ]; then
            line="${l//?/─}"  # create a line with text width
            llen="${#l}"  # line length

            echo "line: $line"
            echo "len: $llen"
        fi
    done

    # header
    echo -ne "\n " # blank line and left margin

    # checks if have title arg
    if [ -n "$2" ]; then
        local tlen=${#2} 
        # some calcs ((phase_len - title_len - spaces) / just_left_lenght)
        local x=$((($llen - $tlen - 2) / 2))

        # FIXME: printf padding by bytes, bug specials characters
        # print line and replace with sed using quantifiers of words length
        painter "┌${line}┐" 'green' | sed -E "s/(─.{$x})(.{$tlen})/\1 $2 /"
        
        # add blank line
        tput cuf1 # left margin
        painter "│ ${line//?/ } │" 'green'
    else
        painter "┌─${line}─┐" 'green'
    fi
    
    # print content message line by line
    printf " $(painter "│ %-${llen}s │" 'green')\n" "${msg[@]}"
    
    # bottom
    tput cuf1  # left margin
    painter "└─${line}─┘" 'green'
}


#----------------------------------
# Main function
#----------------------------------
main() {
    # reset variables
    local aux=''
    
    # initial message
    message "$WELCOME_MSG" "$WELCOME_TITLE"

    # do loop until aux be filled
    while [ -z "$aux" ]; do
        # fake PS1
        #echo -ne "$(painter "$USER@$HOSTNAME" "light_green"):$(painter "$PWD" "light_blue")# "
        echo -ne "$(painter "$USER@$HOSTNAME" "light_green"):# "
        read cmd  # read command
        
        # checks if command is not null
        if [ -n "$cmd" ]; then
            echo $(eval "$cmd")
            [[ "$cmd" = 'exit' ]] && aux='set'
        fi
    done
    
    # just for test
    message "$DONE"
}


#----------------------------------/
# Args actions
#----------------------------------
case $1 in
    -h|--help) echo "Se vira ..." ;;  # TODO
    -v|--version) _show_version ;;
    *) 
        # print converted ASCII logo to prevent escape erros
        base64 -d <<< $_LOGO

        select_lang

        # let the show begin
        main
    ;;
esac

# all done... exit
exit 0
